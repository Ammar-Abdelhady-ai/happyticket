- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

- name: disable swap
  ansible.builtin.command: swapoff -a
  ignore_errors: true

- name: Remove swap partition from /etc/fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(?!#).*swap.*$'
    replace: '# \g<0>'


- name: Check if Docker is already installed
  ansible.builtin.command:
    cmd: which docker
  register: docker_check
  changed_when: false
  ignore_errors: true


- name: Verify Docker is working (if installed)
  ansible.builtin.command:
    cmd: docker info
  register: docker_info
  ignore_errors: true
  changed_when: false
  when: docker_check.rc == 0

- name: Display Docker info
  ansible.builtin.debug:
    var: docker_info.stdout_lines
  when: docker_check.rc == 0 and docker_info.rc == 0



# Install containerd separately from Docker
- name: Install containerd
  ansible.builtin.get_url:
    url: https://github.com/containerd/containerd/releases/download/v2.0.3/containerd-2.0.3-linux-amd64.tar.gz
    dest: /tmp/containerd-2.0.3-linux-amd64.tar.gz

- name: Extract containerd tarball
  ansible.builtin.unarchive:
    src: /tmp/containerd-2.0.3-linux-amd64.tar.gz
    dest: /usr/local
    remote_src: yes

- name: Create directory for systemd service if it does not exist
  ansible.builtin.file:
    path: /usr/local/lib/systemd/system
    state: directory

- name: Create containerd config directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Generate default containerd config
  ansible.builtin.shell:
    cmd: containerd config default > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Configure containerd to use systemd cgroup driver
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Ensure CRI plugin is enabled in containerd config
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*disabled_plugins\s*='
    line: '    disabled_plugins = []'
    state: present

- name: containerd as a systemd service
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    dest: /usr/local/lib/systemd/system/containerd.service
  notify: reload systemd

- name: download runc
  ansible.builtin.get_url:
    url: https://github.com/opencontainers/runc/releases/download/v1.2.5/runc.amd64
    dest: /tmp/runc.amd64
    mode: '0755'

- name: Install runc using install command
  ansible.builtin.command:
    cmd: install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc

- name: download CNI plugins
  ansible.builtin.get_url:
    url: https://github.com/containernetworking/plugins/releases/download/v1.6.2/cni-plugins-linux-amd64-v1.6.2.tgz
    dest: /tmp/cni-plugins-linux-amd64-v1.6.2.tgz

- name: Create directory for CNI if it does not exist
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory

- name: Extract CNI plugins
  ansible.builtin.unarchive:
    src: /tmp/cni-plugins-linux-amd64-v1.6.2.tgz
    dest: /opt/cni/bin
    remote_src: yes

- name: enable port forwarding
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    sysctl_set: yes

- name: Restart containerd
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Wait for containerd to be ready
  ansible.builtin.wait_for:
    port: 0
    delay: 5
    timeout: 30

- name: Verify containerd CRI is working
  ansible.builtin.command:
    cmd: crictl --runtime-endpoint=unix:///run/containerd/containerd.sock version
  register: crictl_test
  ignore_errors: true

- name: Display crictl version output
  ansible.builtin.debug:
    var: crictl_test
  when: crictl_test is defined

- name: install prerequisites for kubeadm
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items:
  - apt-transport-https
  - ca-certificates
  - curl
  - gpg

- name: Ensure /etc/apt/keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes GPG key
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
    dest: /tmp/kubernetes-release.key
    mode: '0644'

- name: Check if Kubernetes GPG keyring exists
  ansible.builtin.stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: keyring_stat

- name: Add Kubernetes GPG key to keyring
  ansible.builtin.command:
    cmd: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
  become: true

- name: Ensure /etc/apt/sources.list.d directory exists
  ansible.builtin.file:
    path: /etc/apt/sources.list.d
    state: directory
    mode: '0755'

- name: Add Kubernetes repository to sources list
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /'
    create: true
    mode: '0644'
  become: true

- name: apt install kubeadm, kubelet, and kubectl
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
  - kubeadm
  - kubelet
  - kubectl

- name: Set hostname
  ansible.builtin.hostname:
    name: "worker-1"

# --cri-socket=unix:///run/containerd/containerd.sock

# If you already initialized the control plane node and lost the join command, run this on the control plane node:
# kubeadm token create --print-join-command
# Generates a new bootstrap token (valid for 24 hours by default).